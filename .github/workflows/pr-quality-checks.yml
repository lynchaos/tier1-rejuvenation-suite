name: Pull Request Quality Checks

on:
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better diff analysis
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run ruff linting
      run: |
        echo "## 🔍 Ruff Linting Results" >> $GITHUB_STEP_SUMMARY
        ruff check . --output-format=github --diff || {
          echo "❌ Ruff found linting issues" >> $GITHUB_STEP_SUMMARY
          exit 1
        }
        echo "✅ No linting issues found" >> $GITHUB_STEP_SUMMARY
    
    - name: Check ruff formatting
      run: |
        echo "## 📝 Code Formatting Check" >> $GITHUB_STEP_SUMMARY
        ruff format --check --diff . || {
          echo "❌ Code formatting issues found" >> $GITHUB_STEP_SUMMARY
          echo "Run \`ruff format .\` to fix formatting" >> $GITHUB_STEP_SUMMARY
          exit 1
        }
        echo "✅ Code formatting is correct" >> $GITHUB_STEP_SUMMARY
    
    - name: Check black formatting
      run: |
        echo "## 🎨 Black Formatting Check" >> $GITHUB_STEP_SUMMARY
        black --check --diff . || {
          echo "❌ Black formatting issues found" >> $GITHUB_STEP_SUMMARY
          echo "Run \`black .\` to fix formatting" >> $GITHUB_STEP_SUMMARY
          exit 1
        }
        echo "✅ Black formatting is correct" >> $GITHUB_STEP_SUMMARY
    
    - name: Type checking with mypy
      run: |
        echo "## 🔬 Type Checking Results" >> $GITHUB_STEP_SUMMARY
        mypy tier1_suite/ --ignore-missing-imports || {
          echo "❌ Type checking failed" >> $GITHUB_STEP_SUMMARY
          exit 1
        }
        echo "✅ Type checking passed" >> $GITHUB_STEP_SUMMARY
    
    - name: Run comprehensive tests
      run: |
        echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
        pytest tests/ -v --cov=tier1_suite --cov-report=xml --cov-report=term --tb=short || {
          echo "❌ Some tests failed" >> $GITHUB_STEP_SUMMARY
          exit 1
        }
        echo "✅ All tests passed" >> $GITHUB_STEP_SUMMARY
    
    - name: Generate coverage badge
      if: always()
      run: |
        COVERAGE=$(python -c "
        import xml.etree.ElementTree as ET
        try:
            tree = ET.parse('coverage.xml')
            root = tree.getroot()
            coverage = float(root.attrib['line-rate']) * 100
            print(f'{coverage:.1f}')
        except:
            print('0.0')
        ")
        echo "Coverage: ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
        
        # Create coverage badge color
        if (( $(echo "$COVERAGE >= 90" | bc -l) )); then
          COLOR="brightgreen"
        elif (( $(echo "$COVERAGE >= 80" | bc -l) )); then
          COLOR="green"  
        elif (( $(echo "$COVERAGE >= 70" | bc -l) )); then
          COLOR="yellow"
        else
          COLOR="red"
        fi
        
        echo "![Coverage](https://img.shields.io/badge/coverage-${COVERAGE}%25-${COLOR})" >> $GITHUB_STEP_SUMMARY
    
    - name: Security check with bandit
      continue-on-error: true
      run: |
        pip install bandit[toml]
        echo "## 🔒 Security Scan" >> $GITHUB_STEP_SUMMARY
        bandit -r tier1_suite/ -f json -o bandit-report.json || true
        if [ -f bandit-report.json ]; then
          ISSUES=$(python -c "
          import json
          try:
              with open('bandit-report.json') as f:
                  data = json.load(f)
              print(len(data.get('results', [])))
          except:
              print('0')
          ")
          if [ "$ISSUES" -gt "0" ]; then
            echo "⚠️  Found $ISSUES security issues" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No security issues found" >> $GITHUB_STEP_SUMMARY
          fi
        fi
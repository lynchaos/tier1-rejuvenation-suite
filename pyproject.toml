[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tier1-rejuvenation-suite"
version = "1.0.0"
description = "Biologically validated cellular rejuvenation analysis suite with comprehensive biomarker validation"
authors = [
    {name = "Kemal Yaylali", email = "kemal.yaylali@gmail.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
keywords = ["bioinformatics", "cellular-rejuvenation", "aging-research", "biomarkers", "genomics"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
]

dependencies = [
    # Core Data Science Stack
    "pandas>=1.5.0",
    "numpy>=1.21.0",
    "scipy>=1.9.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "plotly>=5.10.0",
    
    # Machine Learning & AI
    "scikit-learn>=1.1.0",
    "xgboost>=1.6.0",
    "lightgbm>=3.3.0",
    "shap>=0.41.0",
    "imbalanced-learn>=0.9.0",
    
    # Bioinformatics & Genomics (Core)
    "anndata>=0.8.0",
    "networkx>=2.8.0",
    "biopython>=1.79",
    
    # Statistical Analysis
    "statsmodels>=0.13.0",
    "pingouin>=0.5.0",
    
    # Data Processing & I/O
    "h5py>=3.7.0",
    "openpyxl>=3.0.10",
    "pyyaml>=6.0",
    "jsonschema>=4.9.0",
    "pydantic>=1.10.0",
    "pydantic-settings>=2.0.0; python_version >= '3.8'",
    
    # Reporting and Templating
    "jinja2>=3.0.0",
    "plotly>=5.0.0",
    
    # Parallel Processing
    "joblib>=1.1.0",
    "dask>=2022.7.0",
    
    # CLI Framework
    "typer>=0.7.0",
    "rich>=12.0.0",
    "click>=8.0.0",
]

[project.optional-dependencies]
web = [
    "streamlit>=1.12.0",
    "dash>=2.6.0",
    "bokeh>=2.4.0",
]
deep-learning = [
    "torch>=1.12.0",
    "torchvision>=0.13.0",
]
single-cell = [
    "scanpy>=1.9.0",
    "umap-learn>=0.5.3",
    "leidenalg>=0.8.10",
    "python-igraph>=0.10.0",
]
reporting = [
    "weasyprint>=56.0",
    "kaleido>=0.2.1",  # For plotly static image export
]
all = [
    "tier1-rejuvenation-suite[deep-learning,single-cell,web,reporting]",
]
dev = [
    # Testing Framework
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-html>=3.1.0",
    "pytest-mock>=3.8.0",
    "pytest-xdist>=2.5.0",
    
    # Code Quality & Formatting
    "black>=22.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
    
    # Type Stubs
    "types-requests>=2.28.0",
    "pandas-stubs>=1.5.0",
]
jupyter = [
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
    "ipywidgets>=8.0.0",
]

[project.urls]
Homepage = "https://github.com/lynchaos/tier1-rejuvenation-suite"
Repository = "https://github.com/lynchaos/tier1-rejuvenation-suite"
Documentation = "https://github.com/lynchaos/tier1-rejuvenation-suite#readme"
Issues = "https://github.com/lynchaos/tier1-rejuvenation-suite/issues"

[project.scripts]
tier1 = "tier1_suite.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["tier1_suite*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.csv", "*.tsv", "*.h5", "*.h5ad"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config", 
    "--tb=short",
    "--durations=10",
    "--maxfail=5",
]

markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests across components", 
    "leakage: Data leakage detection tests",
    "determinism: Seed reproducibility tests",
    "schemas: Data schema and I/O validation tests",
    "transforms: Data transformation tests",
    "slow: Tests that take a long time to run",
    "requires_gpu: Tests that require GPU",
    "requires_large_memory: Tests requiring >4GB RAM",
]

filterwarnings = [
    "ignore::UserWarning",
    "ignore::FutureWarning", 
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.black]
line-length = 88
target-version = ['py38']

[tool.ruff]
line-length = 88
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B018"]

[tool.mypy]
python_version = "3.9"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = false
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "scientific_reporter",
    "SingleCellRejuvenationAtlas.*",
    "MultiOmicsFusionIntelligence.*",
    "RegenOmicsMaster.*",
]
ignore_errors = true